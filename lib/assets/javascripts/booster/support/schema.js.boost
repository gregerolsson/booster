
/**
 * Exposes the local `mixin` as a function to allow it to be parameterized in the
 * future without breakage, and to align it with other mixins that already are
 * parameterized. The actual mixin object is stored outside of the function
 * to prevent unnecessary creation of Function objects.
 *
 * @return {Object} A mixin object that can be applied to any {Backbone.Model}
 */

exports.mixin = function() {
  return mixin;
}

/**
 * A {Backbone.Model} mixin that introduces support for declaratively specifying that
 * one or more nested attributes are to be wrapped in {Backbone.Model}s,
 * {Backbone.Collection}s, or any other type (via constructor) when accessed via the regular
 * `get()` accessor.
 *
 * @type {Object}
 */

var mixin = {

  /**
   * Overrides the {Backbone.Model} `get` function to allow attributes of object or array type
   * to be lazily converted into collections and models which are memoized inside the model instance.
   * This is an alternative to, for instance, instantiating these nested objects in the
   * `initialize` function.
   *
   * @param {string} attribute The name of the attribute to retrieve.
   * @override
   */

  get: function(attribute) {

    // Fast case; the attribute has been accessed before for this model and has already been transformed
    // using the schema type constructor. We optimize for this and return the memoized value immediately.
    if (this._memoized && this._memoized[attribute]) {
      return this._memoized[attribute];
    }

    // This is the actual internal attribute value which we may need to convert or return as-is.
    var value = this.attributes[attribute];

    // If the model prototype has specified a schema with an entry for this particular attribute
    // we go ahead and process it.
    if (this.schema && this.schema[attribute]) {
      var type = this.schema[attribute];
      if (typeof type === 'object') {
        type = type.type;
      }

      if (value.constructor !== type) {
        value = new type(value);
        value.parent = this;

        // Determine if the value should be memoized for performance reasons. Some types of values
        // are memoized by default and some by marking the attribute as `{memoized: true}` in the schema.
        // Memoized values override the internal attribute value so that can be removed from the model
        // to preserve memory.
        if (shallMemoize(type)) {
          this._memoized || (this._memoized = {});
          this._memoized[attribute] = value
          delete this.attributes[attribute];
        }
      }
    }

    return value;
  },

  /**
   * Overrides {Backbone.Model}.toJson to not only return the internal attributes for the
   * model, but also any mapped nested models and collections. Nested collections and models are
   * based on the attributes in a model on instantiation, but manage their own dataset which
   * needs to be merged back into the model when serialized.
   *
   * @return {Object} An object with the internal attributes merged with the attributes of any
   *                  nested models and collections, recursively. Note that this is not a true
   *                  JSON string as per the default behavior in {Backbone.Model}
   * @override
   */

  toJSON: function() {
    var self = this;
    var json = _.clone(this.attributes);

    _.each(this.schema, function(definition, attribute) {
      if (definition.serialize === false) {
        delete json[attribute];
      } else if (_.isFunction(definition.serialize)) {
        json[attribute] = definition.serialize(self.get(attribute));
      } else {
        var value = self.get(attribute);
        json[attribute] = value.toJSON ? value.toJSON() : value;
      }
    });

    return json;
  }
}

/**
 * Returns true if the conversion of an attribute to the given `type` should be
 * memoized inside the model instance.
 *
 * @type {function} The type constructor to evaluate.
 */

function shallMemoize(type) {
  return type.prototype instanceof Backbone.Model ||
         type.prototype instanceof Backbone.Collection ||
         type === Backbone.Model ||
         type === Backbone.Collection;
}
