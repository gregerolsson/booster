
/**
 * Returns a {Handlebars.SafeString} with HTML for an `<input>` element with name and value based
 * on the given `attribute` and the current context (`this`) which is expected to be a {Backbone.Model}.
 *
 * @param  {string} attribute The name of the attribute to use as the name and value for the textarea
 * @param  {Object.<String, *>} options Object containing a mandatory `hash` object to be transformed into attributes.
 * @return {Handlebars.SafeString} A safe string that will not be escaped when used in templates
 */

exports.input = function(attribute, options) {
  options = options.hash;
  options.name = attribute;
  options.value = this.get(attribute);
  return tag('input', options);
}

/**
 * Returns a {Handlebars.SafeString} with HTML for a `<select>` element with name and content based
 * on the given `attribute` int the current context (`this`) which is expected to be a {Backbone.Model}.
 *
 * @param  {string} attribute The name of the attribute to use as the name and value for the textarea
 * @param  {Object.<String, *>} options Object containing a mandatory `hash` object to be transformed into attributes.
 * @return {Handlebars.SafeString} A safe string that will not be escaped when used in templates
 */

exports.textarea = function(attribute, options) {
  options = options.hash;
  options.name = attribute;
  return tag('textarea', options, this.get(attribute));
}

/**
 * @param  {string} attribute The name of the attribute to use as the name and selected option for the select element.
 * @param  {Object|Array} selectOptions The options to choose from in the select element. This can either be an array
 *                                      where the key and value will be the same for an option, or an Object where
 *                                      attribute keys will become __option values__ and the attribute values will
 *                                      be __presented to the user__.
 * @param  {Object.<String, *>} options Object containing a mandatory `hash` object to be transformed into attributes.
 * @return {Handlebars.SafeString} A safe string that will not be escaped when used in templates
 */

exports.select = function(attribute, selectOptions, options) {
  options = options.hash;
  options.name = attribute;

  var value = this.get(attribute);

  if (_.isArray(selectOptions)) {
    selectOptions = _.map(selectOptions, function(option) { // Intentional non-strict comparison below
      return '<option value="#{option}" #{value == option ? "selected" : ""}>#{option}</option>';
    });
  } else {
    selectOptions = _.map(_.keys(selectOptions), function(key) { // Intentional non-strict comparison below
      return '<option value="#{key}" #{value == key ? "selected" : ""}>#{selectOptions[key]}</option>';
    });
  }

  return tag('select', options, '\n' + selectOptions.join('\n') + '\n');
}

/**
 * Generic helper for creating HTML tags.
 *
 * @param {string} name The tag name, for instance `"input"` or `"textarea"`
 * @param {Object.<String,*>} options A set of options that will be converted into HTML attributes. The values will
 *                                    have `toString` invoked on them
 * @param {*=} content Tag content, if any. The result of `content.toString()` will be placed inside the tag.
 */

function tag(name, options, content) {
  var attributes = [];
  _.each(options, function(value, attribute) {
    attributes.push('#{attribute}="#{value}"');
  });
  return new Handlebars.SafeString('<#{name} #{attributes.join(" ")}>#{content || ""}</#{name}>');
}

// Initialization code for this module; every function exported as a helper is
// registered as a handlebars-helper so that they can be used directly from
// Handlebars templates, in addition from JavaScript.
_.each(exports, function(helper, name) {
  Handlebars.registerHelper(name, helper);
});
