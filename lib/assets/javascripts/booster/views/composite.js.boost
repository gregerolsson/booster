var base = require('../view');

/**
 * @extends {base.View}
 * @constructor
 */

exports.View = base.View.extend({

  /**
   * Adds a new child view to the composite. This does not add the view to the DOM tree,
   * which needs to be handled by the inheriting view. The added view will get its
   * `enter()` function invoked if it wants to register a link back to this composite.
   *
   * @param {base.View} view The child view to be added to the composite.
   * @return {base.View} The child view that was passed in.
   */

  add: function (view) {
    this.byCid || (this.byCid = {});
    this.children || (this.children = []);
    this.byCid[view.cid] = view;
    this.children.push(view);
    return view.enter(this);
  },

  /**
   * Removes the child view from the composite. This also removes the view from the
   * DOM tree by invoking its `leave()` function, which also unbinds from any underlying
   * model or collection.
   *
   * @param {base.View|number} view The child view or the index of the child to remove from the composite.
   * @param {base.View|undefined} The view that was removed or `undefined` if it was not in the composite.
   */

  remove: function (view) {
    var index = view;

    if (typeof view === 'number') {
      view = this.children[index];
    } else {
      index = this.children.indexOf(view);
    }

    if (index > -1 && view) {
      this.children.splice(index, 1);
      delete this.byCid[view.cid];
      delete view.parent;
      return view.leave();
    }
  },

  /**
   * Removes the composite from the parent. Overridden to recursively invoke `leave` on all
   * the child views first.
   *
   * @override
   */

  leave: function () {
    _.each(this.children, function (view) {
      view.leave();
    });

    base.View.prototype.leave.call(this);
  },

  /**
   * Renders the `template` function using the given `context` into the view element.
   * If the template contains `{{view}}` tags these will be expanded into placeholder
   * nodes in the DOM fragment which are resolved to the actual views that `{{view}}`
   * adds to this view as children during execution.
   *
   * @param {Function} template The Handlebars template function to render.
   * @param {*} context The initial context to render.
   */

  render: function (template, context) {
    base.View.prototype.render.call(this, template, context);

    var view, self = this;
    this.$('script[data-view]').each(function (i, insertPoint) {
      insertPoint = $(insertPoint);
      view = self.byCid[insertPoint.attr('data-view')]
      insertPoint.replaceWith(view.el);
    });
  }

});