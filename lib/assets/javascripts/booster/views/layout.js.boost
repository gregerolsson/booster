var composite = require('./composite');

/**
 * A {Backbone.View} layout that contains one or more named slots that can be yielded to
 * child views of this composite view. The layout view ensures that a view in an
 * area that is yielded to another view is properly cleaned up by invoking its
 * `leave()` function.
 *
 * The template used to render the layout should mark the available slots
 * to be yielded to child views using the `data-yield` attribute.
 *
 * For example:
 *
 *     <aside data-yield="sidebar"></aside>
 *
 * @extends {composite.View}
 * @constructor
 */

exports.View = composite.View.extend({

  /**
   * @type {String} The CSS class of the DIV element that is auto-generated for this
   *                view, if not overridden, and no element is specified in the options.
   */

  className: 'booster-views-layout',

  /**
   * Sets one or more views in the layout, notifying any existing views in the
   * corresponding areas that they are about to leave, ensuring that event bindings
   * are properly cleared.
   *
   * @param {Object.<string, Backbone.View>} views A set of views to be inserted into the
   *                                               layout, keyed by the name of the slot that
   *                                               this particular view exposes. If a slot with
   *                                               the given name cannot be found in this.el, an
   *                                               error is thrown.
   */

  set: function(views) {
    _.each(views, _.bind(this._insert, this));
    return this;
  },

  /**
   * Returns the view currently displayed in the given slot within the layout, or
   * `undefined` if no view is displayed there at the moment.
   *
   * @param {string} yield The name of the slot to query for the current view.
   * @return {Backbone.View} The view currently displayed in the `yield` slot.
   */
   
  get: function(yield) {
    return this.views ? this.views[yield] : undefined;
  },

  /**
   * Inserts the given view into the given slot inside the layout.
   *
   * @param {Backbone.View} view The view to insert into the layout.
   * @param {string} yield The name of the slot that should receive the view.
   * @private
   */

  _insert: function(view, yield) {
    var slot  = this.$('[data-yield="#{yield}"]'),
        views = this.views || (this.views = { });

    if (slot.length === 0) {
      throw new Error('The layout template does not contain any slot named #{yield}');
    }

    if (views[yield]) {
      this.remove(views[yield]);
      delete views[yield];
    }

    if (view) {
      slot.html(view.el);
      views[yield] = this.add(view);
    }
  }

});