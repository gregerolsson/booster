var observer = require('./support/observer');

/**
 * Extension of {Backbone.View} which supports the concept of entering
 * and leaving a parent view -- a Composite in Booster. Leaving a composite
 * means disappearing from DOM and likely involves unbinding from any events
 * bound to the underlying model or collection.
 *
 * @extends {Backbone.View}
 * @constructor
 */

exports.View = Backbone.View.extend({

  /**
   * Invoked when the view has entered a parent view (a composite). The default
   * behavior is to store a link to the composite for future reference.
   *
   * This method should not normally be invoked directly. Instead, invoke `add` on
   * the parent view which, in turn, will invoke `enter`.
   *
   * @param {Backbone.View} parent The composite view to which this view is added.
   */

  enter: function (parent) {
    this.parent = parent;
    return this;
  },

  /**
   * Invoked when the view is to leave the parent composite. The default behavior is
   * to remove the view from the DOM and unbind any event listeners, as well as any
   * bindings to {Backbone.Events} sources.
   *
   * This method should not normally be invoked directly. Instead, invoke `remove` on
   * the parent view which, in turn, will invoke `leave`.
   */

  leave: function () {
    $(this.el).remove();
    this.unobserve();
    this.unbind();
    return this;
  },

  /**
   * Returns the path to this view as it is contained within the view tree stemming
   * from the root view which is the top-level application view.
   *
   * @returns {Array<exports.View>} Array of views whith the first view being the
   *                                root ancestor view down to the immediate parent
   *                                of this view, which is the last item in the array.
   */

  path: function () {
    var result = [ ],
        parent = this.parent;

    while (parent) {
      result.push(parent);
      parent = parent.parent;
    }

    return result.reverse();
  },

  /**
   * Default method for rendering which accepts the template to be rendered and
   * the context object to pass to the template. An options hash is setup that
   * has a data reference to this view which is used by the `{{view}}` helper,
   * among others, to keep track of the currently executing view.
   *
   * The output from the template is put in `this.el`.
   *
   * @param {Function} template Handlebars template function to invoke.
   * @param {*} context Any object that the template should work with.
   */

  render: function (template, context) {
    var options = { data: { view: this } };
    $(this.el).html(template(context, options));
  }

});

_.extend(exports.View.prototype, observer.mixin());